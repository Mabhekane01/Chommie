version: '3.8'

services:
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
      target: production
    ports:
      - '3000:3000'
    env_file:
      - .env
      - .env.docker.prod
    restart: unless-stopped
    depends_on:
      - api-gateway-redis
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', res => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api-gateway-redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - api_gateway_redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 3s
      retries: 3

  auth-user:
    build:
      context: .
      dockerfile: services/authUser/Dockerfile
      target: production
    ports:
      - '3001:3000'
    env_file:
      - .env
      - .env.docker.prod
    restart: unless-stopped
    depends_on:
      - auth-user-redis
      - auth-user-db
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', res => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-user-redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - auth_user_redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 3s
      retries: 3

  auth-user-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: authdb
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - auth_user_db_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U authuser']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  api_gateway_redis_data:
    driver: local
  auth_user_redis_data:
    driver: local
  auth_user_db_data:
    driver: local

networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: app-bridge
